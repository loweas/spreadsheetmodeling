[
  {
    "objectID": "lo.html",
    "href": "lo.html",
    "title": "Linear Optimization",
    "section": "",
    "text": "Linear Regression\nTime Series Analysis\n\n\n\n\nIts So Exhausting Waiting For Death GIFs - Find & Share on GIPHY"
  },
  {
    "objectID": "lo.html#we-will-be-using-this-after",
    "href": "lo.html#we-will-be-using-this-after",
    "title": "Linear Optimization",
    "section": "",
    "text": "Linear Regression\nTime Series Analysis\n\n\n\n\nIts So Exhausting Waiting For Death GIFs - Find & Share on GIPHY"
  },
  {
    "objectID": "lr.html",
    "href": "lr.html",
    "title": "Linear Regression & Time Series",
    "section": "",
    "text": "Simple Linear Regression\nThis simple example will cover the same one we covered in class. It is a famous example\nA simple regression model is\n\\[y=\\beta_0+\\beta_1x+u\\]\n\\(y\\) is the dependent variable, the one we want to explain or predict \\(x\\) is independent variable (regressor), the one we use to explain or predict \\(y\\) \\(u\\) is error term representing unobserved other factors that affect y \\(Œ≤_0\\) is intercept term (constant term) \\(Œ≤_1\\) is slope coefficient.\nWe will cover a basic example in linear regression which reproduces a well known example of the wage pay gap. This example can be found in\nIntroductory Econometrics: A Modern Approach, 7e by Jeffrey M. Wooldridge. (Wooldridge 2013)\n\nThis is a great resource and textbook for those in economics and interested in regressional analysis!\nThis is a finding that is more of interest to the broader field of economics than our focus of valuing nature. However, I find this is really helpful to illustrate the power of regression analysis and what the they can tell us about the world.\nEach example illustrates how to load data, build econometric models, and compute estimates with R.\nLets Begin Install and load the wooldridge package and lets get started!\n\n#install.packages(\"wooldridge\")\nlibrary(wooldridge)\n\nWarning: package 'wooldridge' was built under R version 4.3.3\n\n\n\nWage Example OLS model\nLoad the wage1 data and check out the documentation.\n\ndata(\"wage1\")\n\n?wage1\n\nThe documentation indicates these are data from the 1976 Current Population Survey, collected by Henry Farber when he and Wooldridge were colleagues at MIT in 1988.\neduc: years of education\nwage: average hourly earnings\nlwage: log of the average hourly earnings\nFirst, make a scatter-plot of the two variables and look for possible patterns in the relationship between them.\n\nplot(wage1$educ, wage1$wage)\n\n\n\n\n\n\n\n\nIt appears that on average, more years of education, leads to higher wages.\n\nLevel\nFirst lets look at how education impacts wages.\n\nsummary(lm(wage ~ educ, data = wage1))\n\n\nCall:\nlm(formula = wage ~ educ, data = wage1)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.3396 -2.1501 -0.9674  1.1921 16.6085 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -0.90485    0.68497  -1.321    0.187    \neduc         0.54136    0.05325  10.167   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.378 on 524 degrees of freedom\nMultiple R-squared:  0.1648,    Adjusted R-squared:  0.1632 \nF-statistic: 103.4 on 1 and 524 DF,  p-value: &lt; 2.2e-16\n\n\nThis example shows use the direct level of changes in wages. Interpret the coefficient. The issue that can arise with using the level of wages is that this data set corresponds to data from the ~50 years ago. Inflation has occurred, wages have gone up. It would be more appropriate to look the percentage change in wages based on the level of education.\n\n\nPercentage\nThe example in the text is interested in the return to another year of education, or what the percentage change in wages one might expect for each additional year of education. To do so, one must use the log(wage). This has already been computed in the data set and is defined as lwage.\nBuild a linear model to estimate the relationship between the log of wage (lwage) and education (educ).\n\\[\\hat{log(wage)}=ùõΩ_0+ùõΩ_1ùëíùëëùë¢ùëê\\]\n\nlog_wage_model &lt;- lm(lwage ~ educ, data = wage1)\n\nPrint the summary of the results.\n\nsummary(log_wage_model)\n\n\nCall:\nlm(formula = lwage ~ educ, data = wage1)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.21158 -0.36393 -0.07263  0.29712  1.52339 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 0.583773   0.097336   5.998 3.74e-09 ***\neduc        0.082744   0.007567  10.935  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4801 on 524 degrees of freedom\nMultiple R-squared:  0.1858,    Adjusted R-squared:  0.1843 \nF-statistic: 119.6 on 1 and 524 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n\n\nMultiple Regression Analysis: Estimation\nCheck the documentation for variable information\nInterpret the coefficient. What does\n\n?wage1\n\nlwage: log of the average hourly earnings\neduc: years of education\nexper: years of potential experience\ntenure: years with current employer\nPlot the variables against lwage and compare their distributions and slope (ùõΩ) of the simple regression lines.\n\n# Set up 3 plots in one row\npar(mfrow = c(1, 4))\n\n# 1. Wage vs Education\nplot(wage1$educ, wage1$lwage,\n     main = \"Wage vs Education\",\n     xlab = \"Years of Education\",\n     ylab = \"Log(Wage)\",\n     pch = 19, col = \"blue\")\nabline(lm(lwage ~ educ, data = wage1), col = \"red\", lwd = 2)\n\n# 2. Wage vs Experience\nplot(wage1$exper, wage1$lwage,\n     main = \"Wage vs Experience\",\n     xlab = \"Years of Experience\",\n     ylab = \"\",  # omit y-axis label to avoid clutter\n     pch = 19, col = \"darkgreen\")\nabline(lm(lwage ~ exper, data = wage1), col = \"red\", lwd = 2)\n\n# 3. Wage vs Tenure\nplot(wage1$tenure, wage1$lwage,\n     main = \"Wage vs Tenure\",\n     xlab = \"Years with Employer (Tenure)\",\n     ylab = \"\",  # omit y-axis label to avoid clutter\n     pch = 19, col = \"purple\")\nabline(lm(lwage ~ tenure, data = wage1), col = \"red\", lwd = 2)\n\n# 3. Wage vs Female\nplot(wage1$female, wage1$lwage,\n     main = \"Wage vs Female\",\n     xlab = \"Binary Indicator\",\n     ylab = \"\",  # omit y-axis label to avoid clutter\n     pch = 19, col = \"pink\")\nabline(lm(lwage ~ female, data = wage1), col = \"red\", lwd = 2)\n\n\n\n\n\n\n\n# Reset plotting layout back to 1 plot\npar(mfrow = c(1, 1))\n\nEstimate the model regressing educ, exper, tenure and female against log(wage).\n\\[\\hat{log(wage)}=\\beta_0+\\beta_1educ+\\beta_3exper+\\beta_4exper^2+\\beta_5tenure+\\beta_6tenure^2+\\beta_7female\\]\n\nhourly_wage_model &lt;- lm(wage ~ educ + exper+expersq + tenure +tenursq+female, data = wage1)\n\nPlot the coefficients, representing percentage impact of each variable on log(wage) for a quick comparison.\n\ncoefficients(hourly_wage_model)\n\n (Intercept)         educ        exper      expersq       tenure      tenursq \n-2.109749786  0.526255073  0.187838302 -0.003797532  0.211694409 -0.002945994 \n      female \n-1.783199752 \n\n\nPrint the estimated model coefficients:\n\nbarplot(coefficients(hourly_wage_model))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferences\n\nWooldridge, Jeffrey M. 2013. Introductory econometrics: a modern approach. 5th ed. Mason, Ohio: South-Western, Cengage Learning."
  },
  {
    "objectID": "datavis.html",
    "href": "datavis.html",
    "title": "Spreadsheet Modeling",
    "section": "",
    "text": "These are the core packages used in R to recreate some of the basic data visualization examples we explored, such as bar charts, pie charts, and pivot-style summaries. Each of these tools plays a specific role from data import and cleaning to aggregation and plotting.\nWhile R provides a powerful and flexible framework for building reproducible and visualizations, it‚Äôs important to note the trade-offs in terms of efficiency and ease of use. For basic visual tasks, such as creating pie charts, bar graphs, or pivot tables, Excel is often faster and more intuitive, especially for users familiar with its drag-and-drop interface.\nAs a visualizations become more complex or need to be automated and repeated (e.g., across multiple datasets or time periods), R offers a more scalable and programmatic solution. The ability to script your workflow means you can quickly regenerate visuals without manually repeating steps: a major advantage over Excel for larger projects or reporting pipelines.\nIn short, Excel excels at speed and simplicity for one-off tasks, while R shines in flexibility, automation, and reproducibility for more advanced or recurring analysis and visualization tasks.\n\n#install.packages(\"ggplot2\")\n#install.packages(\"dplyr\")\n#install.packages(\"tidyr\")\n#install.packages(\"readxl\")\nlibrary(readxl)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.3"
  },
  {
    "objectID": "datavis.html#r-packages",
    "href": "datavis.html#r-packages",
    "title": "Spreadsheet Modeling",
    "section": "",
    "text": "These are the core packages used in R to recreate some of the basic data visualization examples we explored, such as bar charts, pie charts, and pivot-style summaries. Each of these tools plays a specific role from data import and cleaning to aggregation and plotting.\nWhile R provides a powerful and flexible framework for building reproducible and visualizations, it‚Äôs important to note the trade-offs in terms of efficiency and ease of use. For basic visual tasks, such as creating pie charts, bar graphs, or pivot tables, Excel is often faster and more intuitive, especially for users familiar with its drag-and-drop interface.\nAs a visualizations become more complex or need to be automated and repeated (e.g., across multiple datasets or time periods), R offers a more scalable and programmatic solution. The ability to script your workflow means you can quickly regenerate visuals without manually repeating steps: a major advantage over Excel for larger projects or reporting pipelines.\nIn short, Excel excels at speed and simplicity for one-off tasks, while R shines in flexibility, automation, and reproducibility for more advanced or recurring analysis and visualization tasks.\n\n#install.packages(\"ggplot2\")\n#install.packages(\"dplyr\")\n#install.packages(\"tidyr\")\n#install.packages(\"readxl\")\nlibrary(readxl)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.3"
  },
  {
    "objectID": "datavis.html#import-data",
    "href": "datavis.html#import-data",
    "title": "Spreadsheet Modeling",
    "section": "Import Data",
    "text": "Import Data\nBefore beginning your data visualization work in R, it‚Äôs important to ensure that R can locate and access the data file you want to work with. This typically involves setting the correct file path.\nIn the code below, you‚Äôll need to replace the example file path with the actual path to your file. (MUST DO!)\nFor example, if your file is located on your Desktop in a folder named ‚ÄúExcelFiles‚Äù, and the file is named ‚Äúrestaurant.xlsx‚Äù, the full file path might look like:\nOn Windows:\n\"C:/Users/YourName/Desktop/ExcelFiles/restaurant.xlsx\"\nOn Mac:\n\"/Users/YourName/Desktop/ExcelFiles/restaurant.xlsx\"\nBe sure to:\nWhat I would recommend is right click option mac Use forward slashes / instead of backslashes in the file path\nCheck that the file name is spelled correctly and includes the .xlsx extension\nEnsure the file is not open in Excel when R is trying to read it\nOnce you‚Äôve set the correct file path, you can use the readxl package to import the data into R for analysis and visualization.\nIf the readxl package is not already installed on your computer, you‚Äôll need to install it first using install.packages(‚Äúreadxl‚Äù). After it‚Äôs installed, you load the package with library(readxl).\n\n# Fix the below script to find file you downloaded from Lamaku\n\n#restaurants &lt;- read_excel(\"~/Chapter 03/restaurant.xlsx\")\nhead(restaurants)\n\n# A tibble: 6 √ó 4\n  Restaurant `Quality Rating` `Meal Price ($)` `Wait Time (min)`\n       &lt;dbl&gt; &lt;chr&gt;                       &lt;dbl&gt;             &lt;dbl&gt;\n1          1 Good                           18                 5\n2          2 Very Good                      22                 6\n3          3 Good                           28                 1\n4          4 Excellent                      38                74\n5          5 Very Good                      33                 6\n6          6 Good                           28                 5"
  },
  {
    "objectID": "datavis.html#another-importing-data",
    "href": "datavis.html#another-importing-data",
    "title": "Spreadsheet Modeling",
    "section": "Another Importing Data",
    "text": "Another Importing Data\nFiles (Bottom-Right):\nGo through the folder path to where the data is and click on the data to reveal the import option.\n\nThen the following screen will pop up.\n\nImport the data and you will notice the code needed will run in the console. Which you can copy and paste for later or at least take note of because it will show you what the manual code should have looked at."
  },
  {
    "objectID": "datavis.html#graphs",
    "href": "datavis.html#graphs",
    "title": "Spreadsheet Modeling",
    "section": "Graphs",
    "text": "Graphs\n\nPie Graph\n\n# Summarize number of restaurants by quality rating\nrestaurant_counts &lt;- restaurants %&gt;%\n  group_by(`Quality Rating`) %&gt;%\n  summarise(Count = n(), .groups = \"drop\")\n\n# Create pie chart\nggplot(restaurant_counts, aes(x = \"\", y = Count, fill = `Quality Rating`)) +\n  geom_col(width = 1, color = \"white\") +\n  coord_polar(theta = \"y\") +\n  theme_void() +  # removes axes and background\n  labs(title = \"Number of Restaurants by Quality Rating\",\n       fill = \"Quality Rating\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\n\nBar Graph\n\n# Create bar plot\nggplot(restaurant_counts, aes(x = `Quality Rating`, y = Count, fill = `Quality Rating`)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    title = \"Number of Restaurants by Quality Rating\",\n    x = \"Quality Rating\",\n    y = \"Number of Restaurants\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))"
  },
  {
    "objectID": "datavis.html#tables",
    "href": "datavis.html#tables",
    "title": "Spreadsheet Modeling",
    "section": "Tables",
    "text": "Tables\n\nPivot Table to Dplyr\nThis is what we created in Excel using pivot\n\n\n# Step 1: Bin the Meal Price into $10 bins\nrestaurants_binned &lt;- restaurants %&gt;%\n  mutate(\n    PriceBin = cut(\n      `Meal Price ($)`,\n      breaks = seq(0, max(`Meal Price ($)`) + 10, by = 10),\n      include.lowest = TRUE,\n      right = FALSE  # e.g., [10,20)\n    )\n  )\n\n\n# Step 2: Count of restaurants by Quality Rating and Price Bin\npivot_table &lt;- restaurants_binned %&gt;%\n  group_by(`Quality Rating`, PriceBin) %&gt;%\n  summarise(RestaurantCount = n(), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = PriceBin, values_from = RestaurantCount, values_fill = 0)\n\n# View the result\nprint(pivot_table, width = Inf)\n\n# A tibble: 3 √ó 5\n  `Quality Rating` `[10,20)` `[20,30)` `[30,40)` `[40,50]`\n  &lt;chr&gt;                &lt;int&gt;     &lt;int&gt;     &lt;int&gt;     &lt;int&gt;\n1 Excellent                2        14        28        22\n2 Good                    42        40         2         0\n3 Very Good               34        64        46         6"
  },
  {
    "objectID": "datavis.html#median",
    "href": "datavis.html#median",
    "title": "Spreadsheet Modeling",
    "section": "Median",
    "text": "Median\n\nmedian(restaurants$`Meal Price ($)`)\n\n[1] 25"
  },
  {
    "objectID": "datavis.html#mean",
    "href": "datavis.html#mean",
    "title": "Spreadsheet Modeling",
    "section": "Mean",
    "text": "Mean\n\nmean(restaurants$`Meal Price ($)`)\n\n[1] 25.89667"
  },
  {
    "objectID": "datavis.html#z-score",
    "href": "datavis.html#z-score",
    "title": "Spreadsheet Modeling",
    "section": "Z-score",
    "text": "Z-score\nA z-score measures how many standard deviations a value is from the mean.\n\n# Calculate z-scores for meal price\nrestaurants$Meal_Z &lt;- scale(restaurants$`Meal Price ($)`)\nhead(restaurants$Meal_Z)\n\n           [,1]\n[1,] -0.8502343\n[2,] -0.4195542\n[3,]  0.2264659\n[4,]  1.3031661\n[5,]  0.7648160\n[6,]  0.2264659"
  },
  {
    "objectID": "datavis.html#percentile",
    "href": "datavis.html#percentile",
    "title": "Spreadsheet Modeling",
    "section": "Percentile",
    "text": "Percentile\n\n# 90th percentile of meal price\nquantile(restaurants$`Meal Price ($)`, probs = 0.90)\n\n90% \n 38"
  },
  {
    "objectID": "datavis.html#quantile",
    "href": "datavis.html#quantile",
    "title": "Spreadsheet Modeling",
    "section": "Quantile",
    "text": "Quantile\n\n# 90th percentile of meal price\nquantile(restaurants$`Meal Price ($)`, probs = c(0, 0.25, 0.5, 0.75, 1))\n\n  0%  25%  50%  75% 100% \n  10   19   25   32   48"
  },
  {
    "objectID": "datavis.html#correlation",
    "href": "datavis.html#correlation",
    "title": "Spreadsheet Modeling",
    "section": "Correlation",
    "text": "Correlation\n\ncor(restaurants$`Meal Price ($)`, restaurants$`Wait Time (min)`,)\n\n[1] 0.4628228"
  },
  {
    "objectID": "ts.html#libraries",
    "href": "ts.html#libraries",
    "title": "Time Series",
    "section": "Libraries",
    "text": "Libraries\nFirst load these libraries. Remove hashtag before install.package to load library.\n\n# Install the forecast package if not already installed\n#install.packages(\"forecast\")\n# Load the package\nlibrary(forecast)\n\nWarning: package 'forecast' was built under R version 4.3.3\n\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.3"
  },
  {
    "objectID": "ts.html#data",
    "href": "ts.html#data",
    "title": "Time Series",
    "section": "Data",
    "text": "Data\nAnd the following data Remember to switch the directory as this one is specific to my computer!\n\nlibrary(readxl)\ncroptimeseries&lt;- read_excel(\"/Users/ashleylowe/Desktop/SpreadsheetModeling429/2025/In-class/croptimeseries.xlsx\")"
  },
  {
    "objectID": "ts.html#in---class-example",
    "href": "ts.html#in---class-example",
    "title": "Time Series",
    "section": "In - Class Example",
    "text": "In - Class Example\n\nCreate Variable\n\nFirst make a variable that shows production by land used\n\ncroptimeseries$production_byland=croptimeseries$`Production (million bushels)`/croptimeseries$`Planted area (million acres)`\n\nExponential Smoothing\nUse the created variable to predict a exponential smoothing with a damping value of .9. (we will ignore .1 for this example)\n\nBecause R's ets() function is designed to automatically optimize and validate model parameters ‚Äî and it will reject combinations (like AAN with phi = 0.1) that it determines are unstable or inappropriate for your data.\nIn contrast, Excel doesn‚Äôt optimize or reject your model. It simply applies the formula, even if it results in poor or unstable forecasts.\n\n# Ensure your variable is a time series object\n# Replace the frequency and start values as needed\nts_data &lt;- ts(croptimeseries$production_byland, frequency = 1)\n\n# Exponential smoothing with damping value = 0.9\nmodel_damped_09 &lt;- ets(ts_data, model = \"AAN\", damped = TRUE, phi = 0.9)\nforecast_damped_09 &lt;- forecast(model_damped_09)\n\n\n# Get fitted values (same length as original data)\ncroptimeseries$fit_damped_09 &lt;- as.numeric(fitted(model_damped_09))\n\n\n\nMoving Average\n\nCreate a moving average using the interval of a decade.\nExplanation\n\norder = 10 ‚Äî the window size (10 years)\n\n\n\n# Apply 10-year (decade) moving average\ncroptimeseries$ma_10yr &lt;- ma(ts_data, order = 10)\n\n\n\nLine Graph\n\nCreate a line graph that including your production by land (1), the exponential smoothing (2) and the moving average (3)\n\n\nggplot(croptimeseries, aes(x = Year)) +  # Make sure 'Year' exists and is correct\n  geom_line(aes(y = production_byland, color = \"Original\"), size = 1) +\n  geom_line(aes(y = fit_damped_09, color = \"Exp. Smoothing (0.9)\"), size = 1, linetype = \"dashed\") +\n  geom_line(aes(y = ma_10yr, color = \"10-Year Moving Average\"), size = 1, linetype = \"dotdash\") +\n  labs(title = \"Production by Land with Exponential Smoothing and 10-Year Moving Average\",\n       x = \"Year\",\n       y = \"Production\",\n       color = \"Legend\") +\n  theme_minimal()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n‚Ñπ Please use `linewidth` instead.\n\n\nWarning: Removed 10 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\n\n\nMFE Calculation\n\nmean( croptimeseries$production_byland- croptimeseries$fit_damped_09, na.rm = TRUE)\n\n[1] 0.4943744\n\nmean(croptimeseries$production_byland - croptimeseries$fit_damped_1 , na.rm = TRUE)\n\nWarning: Unknown or uninitialised column: `fit_damped_1`.\n\n\n[1] NaN\n\nmean( croptimeseries$production_byland - croptimeseries$ma_10yr , na.rm = TRUE)\n\n[1] 0.05435743"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Spreadsheet Modeling",
    "section": "",
    "text": "We will begin by downloading R and setting up RStudio, followed by practicing simple commands that mirror tasks we previously performed in Excel, such as basic calculations, summaries, and data viewing. We will then transition back to Excel into foundational statistical modeling by starting our exploration of linear regression.\nThis site has some cool educational sources for using R. The goal is to ensure that by the end of the session, every student has R and RStudio successfully installed and can run simple commands confidently.\nWhy have you learn this when were using Execl? Because everything your learning in excel is transferable to other data visual programs and though I don ª t want to make R a large portion of the class just having experience in R is a resume builder.\n\n\n\nThe biggest difference between R and Excel is where you conduct your formula commands and the manipulation of the data in the Cell.\nInstead of working in the formula bar in excel:\n\nYou work in the console. Instead of being able to work within a cell within a sheet (like we do in Excel) all of the commands and manipulation are conducted in the console.\n\nMany functional characters and operators used in Excel also appear in R, often serving similar roles in formulas and expressions. Below is a comparison table of some commonly used functional characters/operators in both:\n\n\n\n\n\n\n\n\n\nOperator\nFunction\nExcel Example\nR Example\n\n\n+\nAddition\n=A1 + B1\nx + y\n\n\n-\nSubtraction\n=A1 - B1\nx - y\n\n\n*\nMultiplication\n=A1 * B1\nx * y\n\n\n/\nDivision\n=A1 / B1\nx / y\n\n\n^\nExponentiation\n=A1 ^ 2\nx ^ 2\n\n\n\nExamples:\n\n1 + 1\n\n[1] 2\n\n\n\n2 * 2\n\n[1] 4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOperator\nFunction\nExcel Example\nR Example\n\n\n\n\n=\nEquality\n=A1=5\nx == 5\n\n\n&lt;&gt;\nNot equal\n=A1&lt;&gt;5\nx != 5\n\n\n&lt;\nLess than\n=A1&lt;5\nx &lt; 5\n\n\n&lt;=\nLess than or equal\n=A1&lt;=5\nx &lt;= 5\n\n\n&gt;\nGreater than\n=A1&gt;5\nx &gt; 5\n\n\n&gt;=\nGreater than or equal\n=A1&gt;=5\nx &gt;= 5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOperator\nFunction\nExcel Example\nR Example\n\n\nAND\nLogical AND\n=AND(A1&gt;5, B1&lt;10)\nx &gt; 5 & y &lt; 10\n\n\nOR\nLogical OR\n=OR(A1&gt;5, B1&lt;10)\nx &gt; 5 | y &lt; 10\n\n\nNOT\nLogical NOT\n=NOT(A1=5)\n!(x == 5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction\nExcel Syntax\nR Syntax\n\n\n\n\nSum\n=SUM(A1:A10)\nsum(x)\n\n\nAverage\n=AVERAGE(A1:A10)\nmean(x)\n\n\nCount\n=COUNT(A1:A10)\nlength(x) or sum(!is.na(x))\n\n\nMaximum\n=MAX(A1:A10)\nmax(x)\n\n\nMinimum\n=MIN(A1:A10)\nmin(x)\n\n\nIF statement\n=IF(A1&gt;5, \"Yes\", \"No\")\nifelse(x &gt; 5, \"Yes\", \"No\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction / Operator\nExcel Example\nR Example\n\n\n\n\nConcatenation\n=A1 & B1\npaste(x, y, sep = \"\") or paste0(x, y)\n\n\nUppercase\n=UPPER(A1)\ntoupper(x)\n\n\nLowercase\n=LOWER(A1)\ntolower(x)\n\n\nLength of string\n=LEN(A1)\nnchar(x)\n\n\n\n\n\n\n\n\n\nConcept\nExcel\nR\n\n\n\n\nReference\nA1, A:A\ndf$A[1],df$A\n\n\nAlso Ref\nA:A\ndf[1] (Indexing, not quite same)"
  },
  {
    "objectID": "index.html#downloading-r",
    "href": "index.html#downloading-r",
    "title": "Spreadsheet Modeling",
    "section": "",
    "text": "We will begin by downloading R and setting up RStudio, followed by practicing simple commands that mirror tasks we previously performed in Excel, such as basic calculations, summaries, and data viewing. We will then transition back to Excel into foundational statistical modeling by starting our exploration of linear regression.\nThis site has some cool educational sources for using R. The goal is to ensure that by the end of the session, every student has R and RStudio successfully installed and can run simple commands confidently.\nWhy have you learn this when were using Execl? Because everything your learning in excel is transferable to other data visual programs and though I don ª t want to make R a large portion of the class just having experience in R is a resume builder."
  },
  {
    "objectID": "index.html#basics",
    "href": "index.html#basics",
    "title": "Spreadsheet Modeling",
    "section": "",
    "text": "The biggest difference between R and Excel is where you conduct your formula commands and the manipulation of the data in the Cell.\nInstead of working in the formula bar in excel:\n\nYou work in the console. Instead of being able to work within a cell within a sheet (like we do in Excel) all of the commands and manipulation are conducted in the console.\n\nMany functional characters and operators used in Excel also appear in R, often serving similar roles in formulas and expressions. Below is a comparison table of some commonly used functional characters/operators in both:\n\n\n\n\n\n\n\n\n\nOperator\nFunction\nExcel Example\nR Example\n\n\n+\nAddition\n=A1 + B1\nx + y\n\n\n-\nSubtraction\n=A1 - B1\nx - y\n\n\n*\nMultiplication\n=A1 * B1\nx * y\n\n\n/\nDivision\n=A1 / B1\nx / y\n\n\n^\nExponentiation\n=A1 ^ 2\nx ^ 2\n\n\n\nExamples:\n\n1 + 1\n\n[1] 2\n\n\n\n2 * 2\n\n[1] 4"
  },
  {
    "objectID": "index.html#comparison-operators",
    "href": "index.html#comparison-operators",
    "title": "Spreadsheet Modeling",
    "section": "",
    "text": "Operator\nFunction\nExcel Example\nR Example\n\n\n\n\n=\nEquality\n=A1=5\nx == 5\n\n\n&lt;&gt;\nNot equal\n=A1&lt;&gt;5\nx != 5\n\n\n&lt;\nLess than\n=A1&lt;5\nx &lt; 5\n\n\n&lt;=\nLess than or equal\n=A1&lt;=5\nx &lt;= 5\n\n\n&gt;\nGreater than\n=A1&gt;5\nx &gt; 5\n\n\n&gt;=\nGreater than or equal\n=A1&gt;=5\nx &gt;= 5"
  },
  {
    "objectID": "index.html#logical-operators",
    "href": "index.html#logical-operators",
    "title": "Spreadsheet Modeling",
    "section": "",
    "text": "Operator\nFunction\nExcel Example\nR Example\n\n\nAND\nLogical AND\n=AND(A1&gt;5, B1&lt;10)\nx &gt; 5 & y &lt; 10\n\n\nOR\nLogical OR\n=OR(A1&gt;5, B1&lt;10)\nx &gt; 5 | y &lt; 10\n\n\nNOT\nLogical NOT\n=NOT(A1=5)\n!(x == 5)"
  },
  {
    "objectID": "index.html#functions-same-concept-different-namessyntax",
    "href": "index.html#functions-same-concept-different-namessyntax",
    "title": "Spreadsheet Modeling",
    "section": "",
    "text": "Function\nExcel Syntax\nR Syntax\n\n\n\n\nSum\n=SUM(A1:A10)\nsum(x)\n\n\nAverage\n=AVERAGE(A1:A10)\nmean(x)\n\n\nCount\n=COUNT(A1:A10)\nlength(x) or sum(!is.na(x))\n\n\nMaximum\n=MAX(A1:A10)\nmax(x)\n\n\nMinimum\n=MIN(A1:A10)\nmin(x)\n\n\nIF statement\n=IF(A1&gt;5, \"Yes\", \"No\")\nifelse(x &gt; 5, \"Yes\", \"No\")"
  },
  {
    "objectID": "index.html#text-operators-functions",
    "href": "index.html#text-operators-functions",
    "title": "Spreadsheet Modeling",
    "section": "",
    "text": "Function / Operator\nExcel Example\nR Example\n\n\n\n\nConcatenation\n=A1 & B1\npaste(x, y, sep = \"\") or paste0(x, y)\n\n\nUppercase\n=UPPER(A1)\ntoupper(x)\n\n\nLowercase\n=LOWER(A1)\ntolower(x)\n\n\nLength of string\n=LEN(A1)\nnchar(x)"
  },
  {
    "objectID": "index.html#cell-references-vs.-variable-references",
    "href": "index.html#cell-references-vs.-variable-references",
    "title": "Spreadsheet Modeling",
    "section": "",
    "text": "Concept\nExcel\nR\n\n\n\n\nReference\nA1, A:A\ndf$A[1],df$A\n\n\nAlso Ref\nA:A\ndf[1] (Indexing, not quite same)"
  },
  {
    "objectID": "index.html#upper-right",
    "href": "index.html#upper-right",
    "title": "Spreadsheet Modeling",
    "section": "Upper Right",
    "text": "Upper Right\n\nSource/Script Editor (Top-Left):\nThis pane is for writing, editing, and saving R scripts. You can compose multiple lines of code, add comments, and save your work for future use and reproducibility. Commands written here are not executed until you explicitly run them."
  },
  {
    "objectID": "index.html#upper-left",
    "href": "index.html#upper-left",
    "title": "Spreadsheet Modeling",
    "section": "Upper Left",
    "text": "Upper Left\nEnvironment/History/Connections/Tutorial :\n\nThis pane provides insights into your current R session.\n\nEnvironment: Displays all the objects (datasets, variables, functions, etc.) currently loaded in your R workspace.\nHistory: Keeps a record of the commands you have executed in the console during the current session.\nConnections: Allows you to manage connections to external data sources or databases.\nTutorial: Provides access to interactive tutorials for learning R."
  },
  {
    "objectID": "index.html#bottom-left",
    "href": "index.html#bottom-left",
    "title": "Spreadsheet Modeling",
    "section": "Bottom Left",
    "text": "Bottom Left\nFiles/Plots/Packages/Help/Viewer (Bottom-Right):\n\nThis multifunctional pane offers various tools:\n\nFiles: Navigates your file system and manages files and directories within your R project.\nPlots: Displays any plots or visualizations generated by your R code.\nPackages: Lists installed R packages, allows you to install new ones, and load/unload packages for use.\nHelp: Provides access to R‚Äôs extensive documentation and help files for functions and packages.\nViewer: Used for viewing local web content generated within R, such as interactive plots or Shiny applications."
  }
]